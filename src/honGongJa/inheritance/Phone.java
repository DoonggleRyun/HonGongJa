package honGongJa.inheritance;

/*객체를 직접 생성할 수 있는 클래스를 실체 클래스라고 한다면 
이 클래스들의 공통적인 특성을 추출해서 선언한 클래스를 추상클래스라고 한다.
추상클래스와 실체 클래스는 상속의 관계를 가지고 있다.

추상클래스의 용도
- 공통된 필드와 메소드의 이름을 통일할 목적
-실제 클래스를 작성할 때 시간 절약.
- 일반적으로 개발 프로젝트에서 설계자와 코더(코더를 작성하는 사람)은 다른일을 수행해야 함.
설계자는 코더에게 클래스는 어떤 구조로 작서앻야 한다는 것을 알려주어야 함.

이를 단순히 문서로 전달한다면 코더가 실수로 필드와 메소드 이름을 다르게 코딩할 수 있음. 코더가 작성해야할 클래슥 다수이고 이 클래스들이 
동일한 필드와 메소드를 가져야 할 경우, 설계자는 이 내용들을 추려내어 추상 클래스로 설계 규격을 만드는 것이 좋음.

추상클래스를 선언할 때는 클래스 선언에 abstract 키워드를 붙여야 한다. 앱스트랙트를 붙이면 
new 연산자를 이용해서 객체를 만들지 못하고, 상속을 통해 자식클래스만 만들 수 있다.

추상클래스도 필드, 생성자, 메소드 선언 가능. 자식객체가 생성될 때 super()를 호출해서 추상클래스 객체를 생성함.

*
*
*/

public abstract class Phone {

	public String owner;
	
	public Phone(String owner) {
		this.owner= owner;
	}
	
	public void turnOn() {
		System.out.println("turn onf");
	}
	public void turnOff() {
		System.out.println("turn off");
	}
}
