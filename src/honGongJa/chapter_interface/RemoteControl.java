package honGongJa.chapter_interface;

/* 자바에서 인터페이스는 객체의 사용 방법을 정의한 타입이다. 인터페이스를 통해 다양한 객체를 동일한 사용방법으로 이용할 수 있다.
 * 
 * 인터페이스는 개발 코드와 객체가 서로 통신하는 접점 역할을 한다.
 * 개발 코드가 인터페이스의 메소드를 호출하면 인터페이스는 객체의 메소드를 호출시킨다.
 * 그렇기 때문에 개발 코드는 객체의 내부 구조를 알 필요가 없고 인터페이스의 메소드만 알고 있으면 된다.
 * 인터페이스 사용이유: 코드변경 없이 실행 내용과 리턴 값을 다양화 할 수 있다는 장점.
 * 
 * 인터페이스는 자바 형태의 소스 파일로 작성되고 컴파일러를 통해 클래스 형태로 컴파일 되기 때문에 물리적 형태는 클래스와 동일.
 * 선언은 public interface 인터페이스이름{} 이런식으로 함.
 * 
 * 인터페이스는 객체로 생성할 수 없기 때문에 생성자를 가질 수 없다.
 * 그래서 인터페이스는 상수필드와 추상메소드만 가짐.
 * 
 * 인터페이스는 객체 사용방법을 정의한 것이므로 실행시 데이터를 저장할 수 있는 인스턴스 또는 정적필드를 선언 할 수 없다.
 * 그러나 constant field는 가능하다. 단, 상수는 인터페이스에 고정된 값으로 실행시에 데이터를 바꿀 수 없다.
 * 상수는 public static final로 선언함. 따라서 인터페이스에 선언된 필드는 모두 public static final의 특성을 가짐. 그 수식어를 생략하더라도
 * 컴파일 과정에서 자동으로 붙게 됨.
 * 
 * 상수는 대문자로 작성하되, 서로 다른 단어는 언더바로 연결하는 것이 관례임.
*/
public interface RemoteControl {

	public int MAX_VOLUME = 10;
	public int MIN_VOLUME = 0;
	/*
	 * 추상메소드 선언
	 * 
	 * 인터페이스를 통해 호출된 메소드는 최종적으로 객체에서 실행된다. 그렇기 때문에 인터페이스의 메소드는 실행 블록이 필요 없는 추상 메소드로 선언한다.
	 * 추상 메소드는 리턴타입, 메소드 이름, 매개변수만 기술되고 중괄호를 붙이지 않는 메소드를 말한다. 인터페이스에 선언된 추상메소드는 모두 
	 * public abstract의 특성을 갖기 때문에 그 수식어 생략하더라도 컴파일 과정에서 자동으로 붙음.
	 * 
	 */
	
	public void turnOn();
	public void turnOff();
	public void setVolume(int volume);
	
}
                                                                                                                                                                  